// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: server_to_node.proto

package server_to_node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendInfoClient is the client API for BackendInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendInfoClient interface {
	//send new Acct_info to raft nodes
	AcctInfo(ctx context.Context, in *AcctName, opts ...grpc.CallOption) (*AcctInf, error)
	//send post info with linked Acct
	SendPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostSucc, error)
	//add acct to nodes
	AddAcct(ctx context.Context, in *Acct, opts ...grpc.CallOption) (*AcctSucc, error)
	GetFeed(ctx context.Context, in *Post, opts ...grpc.CallOption) (BackendInfo_GetFeedClient, error)
}

type backendInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendInfoClient(cc grpc.ClientConnInterface) BackendInfoClient {
	return &backendInfoClient{cc}
}

func (c *backendInfoClient) AcctInfo(ctx context.Context, in *AcctName, opts ...grpc.CallOption) (*AcctInf, error) {
	out := new(AcctInf)
	err := c.cc.Invoke(ctx, "/server_to_node.Backend_info/Acct_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendInfoClient) SendPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostSucc, error) {
	out := new(PostSucc)
	err := c.cc.Invoke(ctx, "/server_to_node.Backend_info/Send_post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendInfoClient) AddAcct(ctx context.Context, in *Acct, opts ...grpc.CallOption) (*AcctSucc, error) {
	out := new(AcctSucc)
	err := c.cc.Invoke(ctx, "/server_to_node.Backend_info/Add_acct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendInfoClient) GetFeed(ctx context.Context, in *Post, opts ...grpc.CallOption) (BackendInfo_GetFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &BackendInfo_ServiceDesc.Streams[0], "/server_to_node.Backend_info/Get_feed", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendInfoGetFeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BackendInfo_GetFeedClient interface {
	Recv() (*Feed, error)
	grpc.ClientStream
}

type backendInfoGetFeedClient struct {
	grpc.ClientStream
}

func (x *backendInfoGetFeedClient) Recv() (*Feed, error) {
	m := new(Feed)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackendInfoServer is the server API for BackendInfo service.
// All implementations must embed UnimplementedBackendInfoServer
// for forward compatibility
type BackendInfoServer interface {
	//send new Acct_info to raft nodes
	AcctInfo(context.Context, *AcctName) (*AcctInf, error)
	//send post info with linked Acct
	SendPost(context.Context, *Post) (*PostSucc, error)
	//add acct to nodes
	AddAcct(context.Context, *Acct) (*AcctSucc, error)
	GetFeed(*Post, BackendInfo_GetFeedServer) error
	mustEmbedUnimplementedBackendInfoServer()
}

// UnimplementedBackendInfoServer must be embedded to have forward compatible implementations.
type UnimplementedBackendInfoServer struct {
}

func (UnimplementedBackendInfoServer) AcctInfo(context.Context, *AcctName) (*AcctInf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcctInfo not implemented")
}
func (UnimplementedBackendInfoServer) SendPost(context.Context, *Post) (*PostSucc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPost not implemented")
}
func (UnimplementedBackendInfoServer) AddAcct(context.Context, *Acct) (*AcctSucc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAcct not implemented")
}
func (UnimplementedBackendInfoServer) GetFeed(*Post, BackendInfo_GetFeedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedBackendInfoServer) mustEmbedUnimplementedBackendInfoServer() {}

// UnsafeBackendInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendInfoServer will
// result in compilation errors.
type UnsafeBackendInfoServer interface {
	mustEmbedUnimplementedBackendInfoServer()
}

func RegisterBackendInfoServer(s grpc.ServiceRegistrar, srv BackendInfoServer) {
	s.RegisterService(&BackendInfo_ServiceDesc, srv)
}

func _BackendInfo_AcctInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcctName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendInfoServer).AcctInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_to_node.Backend_info/Acct_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendInfoServer).AcctInfo(ctx, req.(*AcctName))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendInfo_SendPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendInfoServer).SendPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_to_node.Backend_info/Send_post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendInfoServer).SendPost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendInfo_AddAcct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Acct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendInfoServer).AddAcct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_to_node.Backend_info/Add_acct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendInfoServer).AddAcct(ctx, req.(*Acct))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendInfo_GetFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Post)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendInfoServer).GetFeed(m, &backendInfoGetFeedServer{stream})
}

type BackendInfo_GetFeedServer interface {
	Send(*Feed) error
	grpc.ServerStream
}

type backendInfoGetFeedServer struct {
	grpc.ServerStream
}

func (x *backendInfoGetFeedServer) Send(m *Feed) error {
	return x.ServerStream.SendMsg(m)
}

// BackendInfo_ServiceDesc is the grpc.ServiceDesc for BackendInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server_to_node.Backend_info",
	HandlerType: (*BackendInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acct_info",
			Handler:    _BackendInfo_AcctInfo_Handler,
		},
		{
			MethodName: "Send_post",
			Handler:    _BackendInfo_SendPost_Handler,
		},
		{
			MethodName: "Add_acct",
			Handler:    _BackendInfo_AddAcct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get_feed",
			Handler:       _BackendInfo_GetFeed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server_to_node.proto",
}
